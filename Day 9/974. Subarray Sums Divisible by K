class Solution {        //time complexity O(n)
public:                  //sc = map
    int subarraysDivByK(vector<int>& nums, int k) {
        int n = nums.size();

        unordered_map<int, int>mp;
        mp[0] = 1;
        int sum = 0;
        int count = 0;
        for(int i = 0; i < n; i++){
            sum += nums[i];
            int rem = sum%k;

            if(rem < 0){
                rem = k+rem;
            }
            if(mp.find(rem) != mp.end()){
                count += mp[rem];
            }
            mp[rem]++;
        }
        return count;
    }
};

//method 2

class Solution {        //TC= O(n^3)
public:
    int subarraysDivByK(vector<int>& nums, int k) {
        int count = 0;
        for(int i = 0; i < nums.size(); i++){
            int sum = 0;
            for(int j = i; j < nums.size(); j++){
                sum = sum+nums[j];
                if(sum%k == 0)
                count++;
            }
        }
        return count;
    }
};


