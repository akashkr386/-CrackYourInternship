//method 1
//T.C - O(2n)
//S.C - O(n)+O(n)
class Solution {
public:
    Node* copyRandomList(Node* head) {
        Node* temp = head;
        unordered_map<Node*, Node*>mp;
        Node* dummy = new Node(-1);
        Node* x = dummy;
        while(temp!=NULL){
            Node* ans = new Node(temp->val);
            mp[temp] = ans;
            temp = temp->next;
        }
        temp = head;
        while(temp!=NULL){
           Node* copyNode = mp[temp];
           copyNode->next = mp[temp->next];
           copyNode->random = mp[temp->random];
           temp = temp->next; 
        }
        return mp[head];
    }
};

//method no 2
                       // T.C-O(3n)
                       // S.C=O(n)
class Solution {
public:
    Node* copyRandomList(Node* head) {
        Node* temp = head;

        while(temp!=NULL){  //make dublicate and push in between
            Node* nextNode = temp->next;
            Node* copy = new Node(temp->val);
            temp->next = copy;
            copy->next = nextNode;
            temp = nextNode;
        }
        temp = head;

        while(temp!=NULL){
            Node* copy = temp->next;
            if(temp->random){
                copy->random = temp->random->next;
            }
            else{
                copy->random = NULL;
            }

            temp = temp->next->next;
        }
        temp = head;
        Node* dummy = new Node(-1);
        Node* res = dummy;
        while(temp!=NULL){
            res->next = temp->next;
            res = res->next;
            temp->next = temp->next->next;
            temp = temp->next;
        }
        return dummy->next;
    }
};
