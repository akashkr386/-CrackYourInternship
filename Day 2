//question 1-> MOVE ZEROS

class Solution {
public:
    void moveZeroes(vector<int>& nums) {
        int zero = 0;
        int j = 0;
        for(int i = 0; i < nums.size(); i++){
            if(nums[i] == 0) zero++;
            else {
                nums[j] = nums[i];
                j++;
            }
            if(i == nums.size()-1){
                    while(zero > 0){
                        nums[j] = 0;
                        j++;
                        zero--;
                    }
            }
        }
    }
};

//question 2-> MERGE SORTED ARRAY 

class Solution {
public:
    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
        int i = m-1;
        int j = n-1;
        int k = nums1.size()-1;
        if(i == -1){
                while(j != -1){
                    nums1[k] = nums2[j];
                    j--;
                    k--;
                }
            }
            if(j == -1){
                while(i != -1){
                    nums1[k] = nums1[i];
                    i--;
                    k--;
                }
            }
        while(i>=0 && j >= 0){
            if(nums1[i] > nums2[j]){
                nums1[k] = nums1[i];
                i--;
                k--;
            }
            else{
                nums1[k] = nums2[j];
                j--;
                k--;
            }
            if(i == -1){
                while(j != -1){
                    nums1[k] = nums2[j];
                    j--;
                    k--;
                }
            }
            if(j == -1){
                while(i != -1){
                    nums1[k] = nums1[i];
                    i--;
                    k--;
                }
            }
        }
    }
};

question 3-> SPIRAL MAXRIX

class Solution {
public:
    vector<int> spiralOrder(vector<vector<int>>& matrix) {
        int m = matrix.size();
        int n = matrix[0].size();
        vector<int>v;
        int minR = 0,minC = 0;
        int maxR = m-1; 
        int maxC = n-1;

        while(minR <= maxR && minC <= maxC){
            //right
            if(minR > maxR || minC > maxC) break;
            for(int i = minC; i <= maxC; i++){
                v.push_back(matrix[minR][i]);
            }
            minR++;
            //bottom
            if(minR > maxR || minC > maxC) break;
            for(int i = minR; i <= maxR; i++){
                v.push_back(matrix[i][maxC]);
            }
            maxC--;
            //left
            if(minR > maxR || minC > maxC) break;
            for(int i = maxC; i >= minC; i--){
                v.push_back(matrix[maxR][i]);
            }
            maxR--;
            //up
            if(minR > maxR || minC > maxC) break;
            for(int i = maxR; i >= minR; i--){
                v.push_back(matrix[i][minC]);
            }
            minC++;
        }
        return v;
    }
};

//Question 4-> Find all duplicate in an array

class Solution {
public:
    vector<int> findDuplicates(vector<int>& nums) {
        vector<int >ans;
        sort(nums.begin(),nums.end());
        int n = nums.size();
        for(int i=0; i<n-1; i++){
            if(nums[i]==nums[i+1]){
                ans.push_back(nums[i]);
                i= i+1;
            }
        }
        return ans;
    }
};

//question 5-> Subarray Sum Equal K

class Solution {
public:
    int subarraySum(vector<int>& nums, int k) {
        int n = nums.size();
        int count = 0;
        int sum = 0;
        for(int i = 0; i < n; i++){
            for(int j = i; j < n; j++){
               sum+= nums[j];
               if(sum == k ){
                count++;
               }
            }
            sum = 0;
        }
        return count;
    }
};
